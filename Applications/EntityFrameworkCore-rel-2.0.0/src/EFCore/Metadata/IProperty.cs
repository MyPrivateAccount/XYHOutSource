// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Microsoft.EntityFrameworkCore.Metadata
{
    /// <summary>
    ///     Represents a scalar property of an entity.
    /// </summary>
    public interface IProperty : IPropertyBase
    {
        /// <summary>
        ///     Gets the entity type that this property belongs to.
        /// </summary>
        IEntityType DeclaringEntityType { get; }

        /// <summary>
        ///     Gets a value indicating whether this property can contain null.
        /// </summary>
        bool IsNullable { get; }

        /// <summary>
        ///     <para>
        ///         Gets a value indicating whether or not this property can be modified before the entity is
        ///         saved to the database.
        ///     </para>
        ///     <para>
        ///         If <see cref="PropertySaveBehavior.Throw" />, then an exception
        ///         will be thrown if a value is assigned to this property when it is in
        ///         the <see cref="EntityState.Added" /> state.
        ///     </para>
        ///     <para>
        ///         If <see cref="PropertySaveBehavior.Ignore" />, then any value
        ///         set will be ignored when it is in the <see cref="EntityState.Added" /> state.
        ///     </para>
        /// </summary>
        PropertySaveBehavior BeforeSaveBehavior { get; }

        /// <summary>
        ///     <para>
        ///         Gets a value indicating whether or not this property can be modified after the entity is
        ///         saved to the database.
        ///     </para>
        ///     <para>
        ///         If <see cref="PropertySaveBehavior.Throw" />, then an exception
        ///         will be thrown if a new value is assigned to this property after the entity exists in the database.
        ///     </para>
        ///     <para>
        ///         If <see cref="PropertySaveBehavior.Ignore" />, then any modification to the
        ///         property value of an entity that already exists in the database will be ignored.
        ///     </para>
        /// </summary>
        PropertySaveBehavior AfterSaveBehavior { get; }

        /// <summary>
        ///     This property is obsolete. Use <see cref="BeforeSaveBehavior"/> instead.
        /// </summary>
        [Obsolete("Use BeforeSaveBehavior instead.")]
        bool IsReadOnlyBeforeSave { get; }

        /// <summary>
        ///     This property is obsolete. Use <see cref="BeforeSaveBehavior"/> instead.
        /// </summary>
        [Obsolete("Use AfterSaveBehavior instead.")]
        bool IsReadOnlyAfterSave { get; }

        /// <summary>
        ///     This property is obsolete. Use <see cref="BeforeSaveBehavior"/> or <see cref="AfterSaveBehavior"/> instead.
        /// </summary>
        [Obsolete("Use BeforeSaveBehavior or AfterSaveBehavior instead.")]
        bool IsStoreGeneratedAlways { get; }

        /// <summary>
        ///     Gets a value indicating when a value for this property will be generated by the database. Even when the
        ///     property is set to be generated by the database, EF may still attempt to save a specific value (rather than
        ///     having one generated by the database) when the entity is added and a value is assigned, or the property is
        ///     marked as modified for an existing entity. See <see cref="BeforeSaveBehavior" /> and <see cref="AfterSaveBehavior"/>
        ///     for more information.
        /// </summary>
        ValueGenerated ValueGenerated { get; }

        /// <summary>
        ///     Gets a value indicating whether this property is used as a concurrency token. When a property is configured
        ///     as a concurrency token the value in the database will be checked when an instance of this entity type
        ///     is updated or deleted during <see cref="DbContext.SaveChanges()" /> to ensure it has not changed since
        ///     the instance was retrieved from the database. If it has changed, an exception will be thrown and the
        ///     changes will not be applied to the database.
        /// </summary>
        bool IsConcurrencyToken { get; }

        /// <summary>
        ///     Gets the type of value that this property holds.
        /// </summary>
        new Type ClrType { get; } // Defined here to maintain binary compat with 1.0

        /// <summary>
        ///     Gets a value indicating whether this is a shadow property. A shadow property is one that does not have a
        ///     corresponding property in the entity class. The current value for the property is stored in
        ///     the <see cref="ChangeTracker" /> rather than being stored in instances of the entity class.
        /// </summary>
        new bool IsShadowProperty { get; } // Defined here to maintain binary compat with 1.0
    }
}
